name: Node.js CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        # Ensure SSH directory exists and has correct permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Create the SSH key file with proper permissions
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        # Add EC2 host to known hosts to prevent host key verification issues
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

        # Verify SSH connection
        ssh -i ~/.ssh/deploy_key -v ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} exit

    - name: Deploy Application
      env:
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Deploy application files with verbose output for debugging
        rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude 'node_modules' \
          --exclude '.env' \
          ./ $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/app/

    - name: Configure Environment and Restart Application
      env:
        # Environment Variables from Secrets
        PORT: ${{ vars.PORT || '5000' }}
        MONGO_URI: ${{ secrets.MONGO_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: ${{ vars.NODE_ENV || 'development' }}
        APP_URL: ${{ vars.APP_URL || 'http://localhost:3000' }}
        OTA_SERVER_URL: ${{ vars.OTA_SERVER_URL }}
        AWS_MQTT_ENDPOINT: ${{ secrets.AWS_MQTT_ENDPOINT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AUDIO_BUCKET: ${{ vars.AUDIO_BUCKET }}
        IMAGE_BUCKET: ${{ vars.IMAGE_BUCKET }}
        OTA_BUCKET: ${{ vars.OTA_BUCKET }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        UNWIREDLABS_API_KEY: ${{ secrets.UNWIREDLABS_API_KEY }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      run: |
        # SSH into EC2 and set up environment
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd ~/app
          
          # Create .env file with actual values
          cat > .env << EOL
          MONGO_URI=$MONGO_URI
          JWT_SECRET=$JWT_SECRET
          NODE_ENV=$NODE_ENV
          APP_URL=$APP_URL
          OTA_SERVER_URL=$OTA_SERVER_URL
          AWS_MQTT_ENDPOINT=$AWS_MQTT_ENDPOINT
          AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          AWS_REGION=$AWS_REGION
          AUDIO_BUCKET=$AUDIO_BUCKET
          IMAGE_BUCKET=$IMAGE_BUCKET
          OTA_BUCKET=$OTA_BUCKET
          GOOGLE_API_KEY=$GOOGLE_API_KEY
          UNWIREDLABS_API_KEY=$UNWIREDLABS_API_KEY
          EMAIL_USER=$EMAIL_USER
          EMAIL_PASS=$EMAIL_PASS
          EOL
          PORT=$PORT
          
          # Install dependencies
          npm ci
          
          # Restart application with PM2
          pm2 restart app || pm2 start src/server.js --name "app"
        '

    - name: Deployment Success Notification
      if: success()
      run: echo "🚀 Deployment completed successfully to ${{ secrets.EC2_HOST }}"

    - name: Deployment Failure Notification
      if: failure()
      run: echo "❌ Deployment failed. Check workflow logs for details."